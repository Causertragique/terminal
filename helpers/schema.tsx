/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Categories {
  color: Generated<string | null>;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  descriptionFr: Generated<string | null>;
  id: Generated<number>;
  name: string;
  nameFr: Generated<string>;
}

export interface Commands {
  categoryId: number;
  command: string;
  commonErrors: string[] | null;
  context: string | null;
  createdAt: Generated<Timestamp | null>;
  description: string;
  descriptionFr: Generated<string | null>;
  example: string | null;
  exampleFr: Generated<string | null>;
  id: Generated<number>;
  solutions: string[] | null;
  syntax: string;
  tags: string[] | null;
}

export interface LoginAttempts {
  attemptedAt: Timestamp | null;
  email: string;
  id: Generated<number>;
  ipAddress: string | null;
  success: Generated<boolean>;
  userAgent: string | null;
}

export interface PracticeExercises {
  categoryId: number;
  commandToExecute: string;
  createdAt: Generated<Timestamp | null>;
  description: string;
  descriptionFr: Generated<string | null>;
  difficulty: string;
  expectedOutput: string | null;
  expectedOutputFr: Generated<string | null>;
  hints: string[] | null;
  id: Generated<number>;
  learningPoints: string[] | null;
  title: string;
  titleFr: Generated<string>;
}

export interface QuizQuestions {
  categoryId: number;
  correctAnswer: string;
  createdAt: Generated<Timestamp | null>;
  difficulty: string;
  explanation: string;
  explanationFr: Generated<string | null>;
  id: Generated<number>;
  points: Generated<number | null>;
  question: string;
  questionFr: Generated<string>;
  questionType: string;
  wrongAnswers: string[] | null;
}

export interface Sessions {
  createdAt: Timestamp;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Timestamp;
  userId: number;
}

export interface UserPasswords {
  createdAt: Generated<Timestamp | null>;
  passwordHash: string;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface UserPracticeProgress {
  attempts: Generated<number | null>;
  completed: Generated<boolean | null>;
  completedAt: Timestamp | null;
  exerciseId: number;
  id: Generated<number>;
  sessionId: string;
}

export interface UserQuizResults {
  categoryId: number;
  completedAt: Generated<Timestamp | null>;
  difficulty: string;
  id: Generated<number>;
  passed: boolean;
  score: number;
  sessionId: string;
  totalQuestions: number;
}

export interface Users {
  avatarUrl: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  role: Generated<string>;
  updatedAt: Generated<Timestamp | null>;
}

export interface UserSessions {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  sessionId: string;
}

export interface DB {
  categories: Categories;
  commands: Commands;
  loginAttempts: LoginAttempts;
  practiceExercises: PracticeExercises;
  quizQuestions: QuizQuestions;
  sessions: Sessions;
  userPasswords: UserPasswords;
  userPracticeProgress: UserPracticeProgress;
  userQuizResults: UserQuizResults;
  users: Users;
  userSessions: UserSessions;
}




// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.